<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:context="http://www.springframework.org/schema/context" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="   http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   http://www.springframework.org/schema/context   http://www.springframework.org/schema/context/spring-context-3.0.xsd   http://www.springframework.org/schema/aop   http://www.springframework.org/schema/aop/spring-aop-3.0.xsd   http://www.springframework.org/schema/jee   http://www.springframework.org/schema/jee/spring-jee-3.0.xsd   http://www.springframework.org/schema/tx   http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
	<aop:aspectj-autoproxy />
	<bean id="jpaInterceptorFlushEager" class="org.springframework.orm.jpa.JpaInterceptor">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
		<!-- Need to flush to detect OptimisticLockingException and do proper rollback. -->
		<property name="flushEager" value="true" />
	</bean>
	<bean id="errorHandlingAdvice" class="org.fornax.cartridges.sculptor.framework.errorhandling.ErrorHandlingAdvice" />
	<bean id="hibernateErrorHandlingAdvice" class="org.fornax.cartridges.sculptor.framework.errorhandling.HibernateErrorHandlingAdvice" />
	<bean id="serviceContextStoreAdvice" class="org.fornax.cartridges.sculptor.framework.errorhandling.ServiceContextStoreAdvice" />

	<!-- Logging interceptor -->
	<bean id="loggingHandlingAdvice" class="org.siemac.metamac.core.common.aop.MetamacErrorHandling" />
	<bean id="flushingHandlingAdvice" class="es.gobcan.istac.search.aop.FlushingInterceptor" />
	<bean id="disableFlushHandlingAdvice" class="es.gobcan.istac.search.aop.DisableFlushInterceptor" />

	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<!-- all methods starting with 'get' or 'find' are read-only -->
			<tx:method name="get*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<!-- all other methods are transactional and ApplicationException will cause rollback -->
			<tx:method name="*" read-only="false"
				rollback-for="org.siemac.metamac.core.common.exception.MetamacException,org.fornax.cartridges.sculptor.framework.errorhandling.ApplicationException" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="updateServicePointCut"
			expression="(execution(public * es.gobcan.istac.search..serviceapi.*Service.*(..)) and not 
                                                                (execution(public * es.gobcan.istac.search..serviceapi.*Service.retrieve*(..)) or 
                                                                 execution(public * es.gobcan.istac.search..serviceapi.*Service.find*(..))))" />

		<aop:pointcut id="serviceFacadePointCut" expression="execution(public * es.gobcan.istac.search..serviceapi.*ServiceFacade.*(..))" />
		<aop:pointcut id="doMapperPointCut" expression="execution(public * es.gobcan.istac.search.core.mapper.*2DoMapper.*(..))" />
		<!-- Repeating the expression, since I can't find a way to refer to the other pointcuts. -->
		<aop:pointcut id="updatingServiceFacadePointCut"
			expression="execution(public * es.gobcan.istac.search..serviceapi.*ServiceFacade.*(..)) and not (execution(public * es.gobcan.istac.search..serviceapi.*.retrieve*(..)) or execution(public * es.gobcan.istac.search..serviceapi.*.find*(..)))" />

		<aop:advisor pointcut-ref="serviceFacadePointCut" advice-ref="txAdvice" order="1" />
		<aop:advisor pointcut-ref="serviceFacadePointCut" advice-ref="serviceContextStoreAdvice" order="2" />
		<aop:advisor pointcut-ref="serviceFacadePointCut" advice-ref="errorHandlingAdvice" order="3" />
		<aop:advisor pointcut-ref="serviceFacadePointCut" advice-ref="hibernateErrorHandlingAdvice" order="4" />
		<aop:advisor pointcut-ref="updatingServiceFacadePointCut" advice-ref="jpaInterceptorFlushEager" order="5" />

		<!-- Logging interceptor -->
		<aop:aspect id="afterThrowing" ref="loggingHandlingAdvice">
			<aop:after-throwing pointcut-ref="serviceFacadePointCut" throwing="ex" method="afterThrowing" />
		</aop:aspect>

		<!-- Flushing interceptor -->
		<aop:aspect id="flushing" ref="flushingHandlingAdvice">
			<aop:after-returning pointcut-ref="updateServicePointCut" method="forceFlushToOptimisticLocking" />
		</aop:aspect>

		<!-- Flush mode interceptor -->
		<aop:aspect id="flushingMode" ref="disableFlushHandlingAdvice">
			<aop:around method="manageFlushMode" pointcut-ref="doMapperPointCut" />
		</aop:aspect>

	</aop:config>
</beans>
